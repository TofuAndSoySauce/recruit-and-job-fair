package kr.happyjob.study.community.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.happyjob.study.community.model.CommunityCommentModel;
import kr.happyjob.study.community.model.CommunityModel;
import kr.happyjob.study.community.service.CommunityService;

@Controller
@RequestMapping("/community/")
public class CommunityController {

	@Autowired
	CommunityService communityService;

	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	// private final String className = this.getClass().toString();

	// 커뮤니티페이지 + 답글목록
	@RequestMapping("community.do")
	public String board(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {

		model.addAttribute("loginId", (String) session.getAttribute("loginId"));
		model.addAttribute("userNm", (String) session.getAttribute("userNm"));		

		return "community/community";
	}

	// 커뮤니티 목록
	@RequestMapping("communitylist.do")
	public String boardlist(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("   - paramMap : " + paramMap);
		int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
		int cpage = Integer.parseInt((String) paramMap.get("cpage"));
		int pageindex = (cpage - 1) * pageSize;
		paramMap.put("pageindex", pageindex);
		paramMap.put("pageSize", pageSize);
		List<CommunityModel> communitylist = communityService.communitylist(paramMap);
		int countcommunitylist = communityService.countcommunitylist(paramMap);

		model.addAttribute("communitylist", communitylist);
		model.addAttribute("countcommunitylist", countcommunitylist);

		return "community/communityList";
	}
	
	 // 조회수
	 @RequestMapping("hit.do")
	 @ResponseBody 
	 public Map<String, Object> hit(@RequestParam
			Map<String, Object> paramMap) throws Exception{ logger.info(
			"   - paramMap : " + paramMap);
	  
	 	communityService.hit(paramMap);
	  
	 	Map<String, Object> returnMap = new HashMap<String, Object>();
	 	returnMap.put("result", "SUCCESS");
	  
	 	return returnMap; 
	}
	 

	// 등록, 수정, 삭제
	@RequestMapping("communitysavefile.do")
	@ResponseBody
	public Map<String, Object> communitysave(Model model, @RequestParam Map<String, Object> paramMap,
			@RequestParam("addfile") List<MultipartFile> multiFile, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("   - paramMap : " + paramMap);
		logger.info("   - request : " + request);

		paramMap.put("loginId", session.getAttribute("loginId"));

		String action = (String) paramMap.get("action");

		if ("I".equals(action)) {
			// communityService.communitynewsave(paramMap);
			communityService.communitynewsavefile(paramMap, request, multiFile);
		} else if ("U".equals(action)) {
			// communityService.communityupdate(paramMap);
			communityService.communitynewupdatefile(paramMap, request, multiFile);
		} else if ("D".equals(action)) {
			communityService.communitydelete(paramMap);
		}

		Map<String, Object> returnMap = new HashMap<String, Object>();

		returnMap.put("result", "SUCCESS");

		return returnMap;
	}

	// 상세보기
	@RequestMapping("communitydetail.do")
	@ResponseBody
	public Map<String, Object> communitydetail(Model model, @RequestParam Map<String, Object> paramMap,
			HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		logger.info("   - paramMap : " + paramMap);

		CommunityModel detail = communityService.communitydetail(paramMap);
		session.setAttribute("writer", detail.getWriter_id());
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String communitycommentlist = this.commentlist(model,paramMap);
		
		returnMap.put("communitycommentlist", communitycommentlist);
		returnMap.put("detail", detail);
		returnMap.put("id", session.getAttribute("loginId"));

		logger.info("   - returnMap : " + returnMap);

		return returnMap;
	}
	
	// 댓글 목록
	@RequestMapping("communitycommentlist.do")
	public String commentlist(Model model, @RequestParam Map<String, Object> paramMap) throws Exception {
		logger.info("   - paramMap : " + paramMap);
		
		int pageSize = Integer.parseInt((String) paramMap.get("pageSizeCMT"));
		int cpage = Integer.parseInt((String) paramMap.get("cpageCMT"));
		int pageindex = (cpage - 1) * pageSize;
		paramMap.put("pageindex", pageindex);
		paramMap.put("pageSize", pageSize);
		List<CommunityCommentModel> communitycommentlist = communityService.communitycommentlist(paramMap);
		int countcommentlist = communityService.countcommentlist(paramMap);
		
		model.addAttribute("communitycommentlist", communitycommentlist);
		model.addAttribute("countcommentlist", countcommentlist);
		
		return "community/communitycommentList";
	}
	
	// 댓글등록
	// 등록, 수정, 삭제
	@RequestMapping("communitycommentsave.do")
	@ResponseBody
	public Map<String, Object> communitcommentysave(Model model, @RequestParam Map<String, Object> paramMap,
			 HttpServletRequest request,HttpServletResponse response, HttpSession session) throws Exception {
		logger.info("   - paramMap : " + paramMap);
		logger.info("   - request : " + request);

		paramMap.put("loginId", session.getAttribute("loginId"));

		String action = (String) paramMap.get("action");

		if ("I".equals(action)) {
			 communityService.commetnnewsave(paramMap);
			logger.info("paramMAP : "  + paramMap);
		} else if ("U".equals(action)) {
			 communityService.commentupdate(paramMap);
		} else if ("D".equals(action)) {
			communityService.commentdelete(paramMap);
		}

		Map<String, Object> returnMap = new HashMap<String, Object>();

		returnMap.put("result", "SUCCESS");

		return returnMap;
	}

}
