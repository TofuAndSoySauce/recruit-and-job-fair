package kr.happyjob.study.ad.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.happyjob.study.ad.model.AdModel;
import kr.happyjob.study.ad.model.AdQueryParam;
import kr.happyjob.study.ad.model.AdResponseDto;
import kr.happyjob.study.ad.service.AdService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Controller
@RequestMapping("/ad/")
public class AdController {	
	
	private final AdService adService;
	
	private final Logger logger = LogManager.getLogger(this.getClass());
	
	@RequestMapping("adStatus.do")
	public String adMgt(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {

		model.addAttribute("loginId", (String) session.getAttribute("loginId"));
		model.addAttribute("userNm", (String) session.getAttribute("userNm"));

		return "ad/adMgt";
	}
	
	// 채용공고 인서트, 업데이트, 딜리트
	@RequestMapping("adSaveFile.do")
	@ResponseBody
	public Map<String, Object> adSaveFile(Model model, @RequestParam Map<String, Object> paramMap,
			@RequestParam("addfile") List<MultipartFile> multiFile, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {

		paramMap.put("loginID", session.getAttribute("loginId"));
		String action = (String) paramMap.get("action");

		if ("I".equals(action)) {
			adService.adNewSaveFile(paramMap, request, multiFile);
		}
		else if ("U".equals(action)) {
			adService.adUpdateFile(paramMap, request, multiFile);
		}
		else if ("D".equals(action)) {
			adService.adDelete(paramMap);
		}
		else if ("R".equals(action)) {
			adService.adRestart(paramMap);
		}
		else if ("C".equals(action)) {
			adService.adCancel(paramMap);
		}
		else if ("P".equals(action)) {
			adService.adComplete(paramMap);
		}
		
		
		Map<String, Object> returnMap = new HashMap<String, Object>();
		returnMap.put("result", "SUCCESS");
		return returnMap;
		
	}
	
	
	// 채용공고 리스트 불러오기
	@RequestMapping("adList.do")
	public String adList(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
		int cpage = Integer.parseInt((String) paramMap.get("cpage"));
		int pageindex = (cpage - 1) * pageSize;
		
		paramMap.put("pageindex", pageindex);
		paramMap.put("pageSize", pageSize);

		int countAdList = adService.countAdList(paramMap);
		List<AdModel> adList = adService.adList(paramMap);
		
		model.addAttribute("countAdList", countAdList);  
		model.addAttribute("adList", adList);
		
		return "ad/adList";
	}
	
	
	// 채용공고 상세보기 초기화
	@RequestMapping("adDetail.do")
	@ResponseBody
	public Map<String, Object> adDetail(Model model, @RequestParam Map<String, Object> paramMap,
			HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		Map<String, Object> adDetailMap = adService.adDetail(paramMap);
		return adDetailMap;
	}
	
	
	// 채용공고 인적사항 초기화
	@RequestMapping("userDetail.do")
	@ResponseBody
	public Map<String, Object> userDetail(Model model, @RequestParam Map<String, Object> paramMap,
			HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		Map<String, Object> userDetailMap = adService.userDetail(paramMap);
		
		return userDetailMap;
	}
	
	@GetMapping("index.do")
	public String getAdMain(Model model, HttpSession session) {

		return "ad/adMain";

	}
	
	@GetMapping("list.do")
	public String getList(Model model, HttpSession session, HttpServletRequest request, AdQueryParam queryParam) {

		String loginId = (String) session.getAttribute("loginId");

		if (queryParam.getPageSize() == 0) queryParam.setDefaultPage();
		queryParam.setLoginId(loginId);
		queryParam.setPageIndex();

		List<AdResponseDto.Ad> adList = adService.getList(queryParam);
		if(!adList.isEmpty()) model.addAttribute("adTotalCount", adList.get(0).getTotalCount());
		model.addAttribute("adList", adList);

		return "ad/list";

	}
	
	@RequestMapping("adDetailForUser.do")
	@ResponseBody
	public Map<String, Object> adDetailForUser(Model model, @RequestParam Map<String, Object> paramMap,
			HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		paramMap.put("loginId", (String) session.getAttribute("loginId"));
		Map<String, Object> adDetailMap = adService.adDetailForUser(paramMap);
		return adDetailMap;
	}
	
}
